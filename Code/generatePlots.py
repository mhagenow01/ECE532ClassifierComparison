#!/usr/bin/env python

""" Scripts that have the outputs from the various tests
and are used to generate plots using matplotlib
 Created: 12/5/2020
"""

__author__ = "Mike Hagenow"

# libraries
import numpy as np
import matplotlib.pyplot as plt


def plotClassificationPerClassFiveFold():

    fig = plt.figure()
    fig.set_size_inches(10, 4)
    # set width of bar
    barWidth = 0.25

    # set height of bar
    bars_lsq = [0.4981350806451612, 0.8565789473684211, 0.8187925998052583, 0.9495238095238095, 0.5545454545454546, 0.542445987654321, 0.3812797125483693]
    bars_svm = [0.3638608870967742, 0.2118421052631579, 0.8866033755274263, 0.8607142857142855, 0.5818181818181818, 0.5897916666666667, 0.01265616362631288]
    bars_nn = [0.3534274193548387, 0.7368421052631577, 0.7944173969490427, 0.8897619047619048, 0.459090909090909, 0.360162037037037, 0.5972857932559424]

    # Set position of bar on X axis
    r1 = np.arange(len(bars_lsq))
    r2 = [x + barWidth for x in r1]
    r3 = [x + barWidth for x in r2]

    # Make the plot
    plt.bar(r1, bars_lsq, color='#aecfc8', width=barWidth, edgecolor='white', label='LSQ')
    plt.bar(r2, bars_svm, color='#aec6cf', width=barWidth, edgecolor='white', label='SVM')
    plt.bar(r3, bars_nn, color='#aeb6cf', width=barWidth, edgecolor='white', label='NN')

    # Add xticks on the middle of the group bars
    plt.xlabel('Plate Fault', fontweight='bold')
    plt.ylabel('Classification Accuracy')
    plt.xticks([r + barWidth for r in range(len(bars_lsq))], ['Pastry', 'Z Scratch', 'K Scratch', 'Stains', 'Dirtiness', 'Bumps', 'Other Faults'])

    # Create legend & Show graphic
    plt.legend()
    plt.show()

def plotl2reg():
    fig = plt.figure()
    fig.set_size_inches(10, 4)

    lsq_results = [0.5814086862023602, 0.5792285229602886, 0.5757629871911466, 0.5748705292423532, 0.5721702555799255, 0.5697373502464015, 0.565089757860619, 0.559440022230339,
                   0.5528799491253447, 0.5472219703392849, 0.5393639254052301, 0.5286604855438045, 0.5232533053444124, 0.5143762707634012, 0.5056204706674852, 0.49970308293716165,
                   0.4886242953444345, 0.47677322377175174, 0.46504649086230126, 0.44650916265869267, 0.43466840858920486, 0.4233275838589168, 0.41702027338997105, 0.4132764368344972,
                   0.4091565881410868, 0.4063264153758154, 0.40516857849984583, 0.40504070126199415, 0.4045282035690577, 0.40414192667306825, 0.4036254483989471, 0.403883848057085,
                   0.403883848057085, 0.403883848057085, 0.4037559708192333, 0.4037559708192333, 0.4037559708192333, 0.4037559708192333, 0.4037559708192333, 0.4037559708192333]

    svm_results = [0.4037559708192333, 0.4037559708192333, 0.4037559708192333, 0.4037559708192333, 0.4037559708192333, 0.4037559708192333, 0.4037559708192333, 0.4037559708192333,
                   0.4037559708192333, 0.4037559708192333, 0.4037559708192333, 0.4037559708192333, 0.4037559708192333, 0.4037559708192333, 0.4037559708192333, 0.4037559708192333,
                   0.4037559708192333, 0.4037559708192333, 0.4037559708192333, 0.4037559708192333, 0.403109637824201, 0.3979766943992793, 0.39387077329569187, 0.39425638249230643,
                   0.3956663280013468, 0.3961771692533785, 0.39695468729760264, 0.39976794241112557, 0.40414356434710613, 0.4037559708192333, 0.4006753866882697, 0.012988120776471958,
                   0.012988120776471958, 0.012988120776471958, 0.012988120776471958, 0.012988120776471958, 0.012988120776471958, 0.012988120776471958, 0.012988120776471958, 0.012988120776471958]

    lams = np.logspace(-6,3,40)

    plt.semilogx(lams,lsq_results,color='green', label='LSQ')
    plt.semilogx(lams,svm_results,color='blue', label='SVM')

    plt.xlabel('Regularization Coefficient (Lambda)')
    plt.ylabel('Classification Accuracy')

    plt.legend()
    plt.show()

if __name__ == "__main__":
    # plotClassificationPerClassFiveFold()
    plotl2reg()



